apply plugin: 'com.android.library'


android {
    compileSdkVersion 26
    defaultConfig {
        minSdkVersion 19
        //noinspection ExpiredTargetSdkVersion
        targetSdkVersion 22

        buildConfigField 'String', 'VA_VERSION_NAME', '"V' + rootProject.ext.VERSION + '"'

        if (project.hasProperty('commit')) {
            buildConfigField 'String', 'commit', '"' + commit + '"'
        } else {
            buildConfigField 'String', 'commit', '"000000"'
        }

        manifestPlaceholders = [
                PERMISSION_PREFIX:  rootProject.ext.PACKAGE_NAME_32BIT,
                AUTHORITY_PREFIX :  rootProject.ext.PACKAGE_NAME_32BIT,
                VA_VERSION       : '' + rootProject.ext.VERSION_CODE,
        ]
        externalNativeBuild {
            ndkBuild {
                abiFilters "arm64-v8a"//"armeabi-v7a"//,
            }
        }
    }
    buildTypes {
        debug {
            jniDebuggable false
        }
        release {
            minifyEnabled false
        }
    }
    externalNativeBuild {
        ndkBuild {
            path file("src/main/jni/Android.mk")
        }
    }
    lintOptions {
        //IJobService need NewApi
        abortOnError false
        warning 'NewApi', 'OnClick', 'EllipsizeMaxLines'
    }
}
gradle.taskGraph.afterTask { task ->
    def TASK_NAME = "transformNativeLibsWithStripDebugSymbolFor"
    def COPY_ABI_LIST = [
            "lib/armeabi/",
            "lib/armeabi-v7a/",
    ]

    def COPY_FOR_HOUDINI_ABI_LIST = [
            "lib/x86/"
    ]
    if (task.name.startsWith(TASK_NAME)) {
        println("performing lib64 transforming...")
        String buildType = task.name.substring(TASK_NAME.length()).toLowerCase(Locale.US)
        File root = new File(buildDir, "intermediates/transforms/stripDebugSymbol/${buildType}")
        // 0\lib\arm64-v8a
        for (File numberDir : root.listFiles()) {
            if (!numberDir.isDirectory()) {
                continue
            }
            File soDir = new File(numberDir, "lib/arm64-v8a")
            for (File soFile : soDir.listFiles()) {
                if (soFile.name.endsWith("_64.so")) {
                    for (String abi : COPY_ABI_LIST) {
                        def toFile = new File(numberDir, abi + soFile.name)
                        GFileUtils.copyFile(soFile, toFile)
                    }
                    for (String abi : COPY_FOR_HOUDINI_ABI_LIST) {
                        def toFile = new File(numberDir, abi + soFile.name)
                        toFile.getParentFile().mkdirs()
                        toFile.createNewFile()
                    }
//                    soFile.delete()
                    println("copy : " + soFile.path)
                }
            }
            soDir = new File(numberDir, "lib/armeabi-v7a")
            for (File soFile : soDir.listFiles()) {
                if (soFile.name.endsWith("v++.so")) {
                    def toFile = new File(numberDir, "lib/arm64-v8a/" + soFile.name)
                    GFileUtils.copyFile(soFile, toFile)
//                    soFile.delete()
                    println("copy : " + soFile.path)
                }
            }
//            soDir.delete()
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    compileOnly 'com.xdja.safekeyservice:xdjacrypto:1.0.3'
    compileOnly 'com.xdja.safekeyservice:jar_multi_jniapi:3.9.50'
    compileOnly 'com.xdja.safekeyservice:jar_multi_unitepin:3.9.24'
    implementation 'com.android.support:appcompat-v7:26.1.0'
}
